name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Code Checkout
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Code Review with SonarQube
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2.0
        with:
          projectBaseDir: './'
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: Bala-AZD_DevsecOpsCS

      # Step 3: Docker Login
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Docker Build and Push
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 5: Docker Login on EC2
      - name: SSH into EC2 and Deploy to Kubernetes
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ec2-user
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # Docker Login
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull Docker Image
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} 

            # Ensure container is stopped and removed properly
            if [ "$(docker ps -q -f name=my-app)" ]; then
              echo "Stopping and removing the existing container..."
              docker stop my-app
              docker rm my-app
            fi

            # Remove the container if it's stopped but not removed
            if [ "$(docker ps -aq -f name=my-app)" ]; then
              echo "Removing the existing container..."
              docker rm my-app
            fi

            # Run the new container
            docker run -d --name my-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

            # Apply Kubernetes Manifest
            #echo "${{ secrets.KUBERNETES_MANIFEST }}" > /cicd/deployment.yaml
      - name: Apply Kubernetes Manifest
        run: |
          echo "${{ secrets.KUBERNETES_MANIFEST }}" > /cicd/deployment.yaml
          #echo "Current working directory: $(pwd)"
          kubectl apply -f ./cicd/deployment.yaml --validate=false
          kubectl rollout status deployment/my-app-deployment
            #kubectl apply -f deployment.yaml --dry-run=client
            #kubectl apply -f deployment.yaml --validate=false
            #kubectl rollout status deployment/my-app-deployment
