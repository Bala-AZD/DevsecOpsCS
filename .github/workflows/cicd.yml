name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Code Checkout
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Code Review with SonarQube
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2.0
        with:
          projectBaseDir: './'
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: Bala-AZD_DevsecOpsCS

      # Step 3: Docker Login
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Docker Build andPush
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 5: Docker Pull and Deploy
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

    #  - name: Deploy to Kubernetes
      #  run: |
      #    kubectl apply -f deployment.yaml
        #  kubectl rollout status deployment/my-app-deployment

      - name: SSH into Ubuntu VM and Deploy Docker
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.UBUNTU_VM_IP }}
          username: ${{ secrets.UBUNTU_VM_USER }}
          password: ${{ secrets.UBUNTU_VM_PASSWORD }}
          port: 22
        
          script: |
            # Stop the existing container if it's running
            docker ps -q --filter "name=my-app" | grep -q . && docker stop my-app && docker rm my-app

            # Run the new container
            docker run -d --name my-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

# Notify on failure using Telegram (Optonal)
# # notify_failure:
#    runs-on: ubuntu-latest
  #  #steps:
    #  - name: Send Telegram Notification on Failure
     #   uses: appleboy/telegram-action@0.3.2
      #  with:
       #   to: ${{ secrets.TELEGRAM_CHAT_ID }}
         # token: ${{ secrets.TELEGRAM_TOKEN }}
       #   message: 'CI/CD pipeline failed for commit ${{ github.sha }}'
       
